apply Service "ping4" {
    import "generic-service"
    check_command = "ping4"
    assign where host.address
}

apply Service "ssh" {
    import "generic-service"
    check_command = "ssh"
    assign where host.vars.os == "Linux"
}

apply Service for (vhost => config in host.vars.vhosts) {
    import "generic-service"
    check_command = "http"
    vars += config
    ignore where typeof(config) != Dictionary
}

apply Service "imap" {
    import "generic-service"
    check_command = "simap"
    assign where host.name == "gnu.one"
}

apply Service "smtp" {
    import "generic-service"
    check_command = "smtp"
    assign where host.name == "gnu.one"
}

apply Service "by_ssh_hostname" {
    import "generic-service"
    check_command = "by_ssh"
    vars.by_ssh_command = "/usr/local/icinga-plugins/check_hostname.sh"

    assign where host.vars.os == "Linux"
    ignore where get_object("Endpoint", host.name)
    ignore where host.vars.location == "external"
}


apply Service for(disk => config in host.vars.disks) {
    import "generic-service"
    check_command = "disk"
    command_endpoint = host.name
    vars += config
   
    assign where host.vars.os == "Linux" && get_object("Endpoint", host.name)
    ignore where host.vars.location == "external"
}

var ssh_checks = ["load", "procs", "disk" ] 
for (var check in ssh_checks) {
    apply Service "by_ssh_" + check use(check){
        import "generic-service"

        check_command = "by_ssh_" + check

        assign where host.vars.os == "Linux"
        ignore where get_object("Endpoint", host.name)
        ignore where host.vars.location == "external"
    }
}

var agent_checks = ["load", "procs", "icinga" ]
for (var check in agent_checks) {
    apply Service check use(check){
        import "generic-service"
        check_command = check
        command_endpoint = host.name
        assign where get_object("Endpoint", host.name)
    }
}

apply Service "cluster-zone" {
    import "generic-service"
    check_command = "cluster-zone"
    assign where host.vars.os == "Linux"
    ignore where host.name == NodeName    
    ignore where host.vars.location == "external"
}

apply Service "time" {
    import "generic-service"
    check_command = "ntp_time"
    command_endpoint = host.name

    assign where get_object("Endpoint", host.name)
    ignore where host.vars.location == "external"
}

apply Service "apache" {
    import "generic-service"
    check_command = "apache-status"
    check_interval = 10s

    assign where host.vars.vhosts != null
}

apply Service for (action => config in host.vars.postgresql) {
    import "generic-service"
    check_command = "postgres"
    name = "pgsql_" + action
    vars.postgres_action = action
    vars += config
}
